/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.47).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Student;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-10-12T17:02:27.059051704Z[GMT]")
@Validated
public interface StudentApi {

        @Operation(summary = "Assign student to a mentor", description = "", tags = {})
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "mentor assigned successfully"),

                        @ApiResponse(responseCode = "400", description = "mentor assignment failed"),

                        @ApiResponse(responseCode = "404", description = "Student with this id not found") })
        @RequestMapping(value = "/student/assign/{student_id}/{mentor_id}", method = RequestMethod.PUT)
        ResponseEntity<Void> studentAssignStudentIdMentorIdPut(
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("student_id") Integer studentId,
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("mentor_id") Integer mentorId);

        @Operation(summary = "Deassign a student from a mentor", description = "", tags = {})
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "deassigning mentor successful"),

                        @ApiResponse(responseCode = "400", description = "deassigning mentor failed"),

                        @ApiResponse(responseCode = "404", description = "student with this id not found") })
        @RequestMapping(value = "/student/deassign/{student_id}/{mentor_id}", method = RequestMethod.PUT)
        ResponseEntity<Void> studentDeassignStudentIdMentorIdPut(
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("student_id") Integer studentId,
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("mentor_id") Integer mentorId);

        @Operation(summary = "Evaluation of students", description = "Assigning marks to students", tags = {})
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Student evaluated successfully"),

                        @ApiResponse(responseCode = "400", description = "Student evaluation failed"),

                        @ApiResponse(responseCode = "401", description = "student you are trying to evaluate is not currently under you") })
        @RequestMapping(value = "/student/evaluate/{student_id}", consumes = {
                        "application/json" }, method = RequestMethod.PUT)
        ResponseEntity<Void> studentEvaluateStudentIdPut(@RequestBody Student student,
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("student_id") Integer studentId);

        @Operation(summary = "get student", description = "get student", tags = {})
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Student fecthed successfully"),

                        @ApiResponse(responseCode = "404", description = "No students found") })
        @RequestMapping(value = "/student", produces = { "application/json" }, method = RequestMethod.GET)
        ResponseEntity<List<Student>> studentGet();

        @Operation(summary = "", description = "Register a new student", tags = {})
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Student registered successfully "),

                        @ApiResponse(responseCode = "400", description = "Unable to add student") })
        @RequestMapping(value = "/student/register", produces = { "application/json" }, method = RequestMethod.POST)
        ResponseEntity<Void> studentRegisterPost(@RequestBody Student student);

        @Operation(summary = "get student", description = "get student", tags = {})
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Student fecthed successfully"),

                        @ApiResponse(responseCode = "404", description = "Student with the student id requested not found") })
        @RequestMapping(value = "/student/{student_id}", produces = { "application/json" }, method = RequestMethod.GET)
        ResponseEntity<Student> studentStudentIdGet(
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("student_id") Integer studentId);

        @Operation(summary = "edit student details", description = "edit student details", tags = {})
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Student details updated successfully"),

                        @ApiResponse(responseCode = "400", description = "Student details updation failed"),

                        @ApiResponse(responseCode = "404", description = "Student with the id not found") })
        @RequestMapping(value = "/student/{student_id}", produces = { "application/json" }, method = RequestMethod.PUT)
        ResponseEntity<Void> studentStudentIdPut(@RequestBody Student student,
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("student_id") Integer studentId);

}
